                                                 TURIP Formulate Group
                                                      27 November 2016

      Tiny (Tottori university) Universal Robot Interface Protocol

Version

    Draft-2016-11-27-01

Status of this Memo

    開発段階の仕様です。今後の大幅な変更があり得ます。また、本ドキュメントは不完全です。

Abstract

    本ドキュメントは、Tiny (Tottori university) Universal Robot Interface
    Protocol(TURIP)を定義します。TURIPは、低機能なマイクロコントローラにより駆動され
    るデバイスを、様々なネットワークに接続するための手段と、デバイスの仕様を把握するための
    仕組みを提供します。

Relation to Other Protocols

    TURIPと他のプロトコルとの関連の概念を以下に示します。

        +-------------------------------------------------------+
        |                       TURIP                           |
        |        +----------------------------------+           |
        |        |               Port               |           |
        |        +----------------------------------+           |
        |               |                    |                  |
        | +--------------------+      +-----------------------+ |
        | |     Binary I/F     |      |       Text I/F        | |
        | +--------------------+      +-----------------------+ |
        |  |        |         |        |         |          |   |
        +--|--------|---------|--------|---------|----------|---+
           |        |         |        |         |          |
        +-----+  +-----+  +------+  +------+  +------+  +------+
        | SPI |  | I2C |  | ...  |  | UART |  | HTTP |  | ...  |
        +-----+  +-----+  +------+  +------+  +------+  +------+

    この図のように、TURIPは様々なレイヤーの様々なプロトコルから、共通したポートへの
    アクセスを行えるようにしたものです。
    TURIPは他のプロトコルからの接続について、それぞれについて方法を定義しています。
    また、ポートの構造を記述したファイルの保管および配布の仕組みも定義されています。
    現在TURIPは、SPI(TURIPonSPI)、I2C(TURIPonI2C)、UART(TURIPonUART)、
    HTTP(TURIPonHTTP)をサポートします。

Port

    TURIPのポートは7bitの空間(0x00-0x7f)を有します。ポート内のデータ長は可変長
    であり、データ形式によりフォーマットが定義されます。データフォーマットには以下の種類が
    存在します。また、データ形式には1byteの識別子が振られています。

    "bool"(0x01)
        ブール型
    "int8"(0x02)
        符号付き8bit整数型
    "uint8"(0x03)
        符号なし8bit整数型
    "int16"(0x04)
        符号付き16bit整数型
    "uint16"(0x05)
        符号なし16bit整数型
    "int32"(0x06)
        符号付き32bit整数型
    "uint32"(0x07)
        符号なし32bit整数型
    "int64"(0x08)
        符号付き62bit整数型
    "uint64"(0x09)
        符号なし64bit整数型
    "float16"(0x10)
        半精度浮動小数点型(IEEE 754)
    "float32"(0x11)
        単精度浮動小数点型(IEEE 754)
    "string"(0x12)
        文字列(UTF-8)
    "bin"(0x13)
        配列、構造体、イメージデータなどのバイナリデータ

    ポートは大きく分けて次のような種類に大別されます。

    0x00(0)
        リセットポート。このポートにアクセスすると、デバイスはリセット（再起動）されます。
    0x01(1) - 0x3f(63)
        ユーザーポート。この範囲はデバイス開発者が自由に用いることができます。
    0x40(64) - 0x7E(126)
        制御ポート。このレジスタはTURIPの制御に用いられます。下記参照。
    0x7f(127)
        NULLポート。このポートにアクセスした場合、デバイスは単一な応答をします。
        応答の形式は、インターフェイスによって異なります。

    制御ポートの定義を以下に示します。

    0x40(64)
        プロトコル情報(string)。"TURIP/(バージョン)"を返す。
    0x41(65)
        モデル番号(uint32)。製品の種別毎に定義された固有番号です。
        この番号はTURIPの管理団体が管理します。
    0x42(66)
        シリアル番号(uint32)。同一製品コード内では一意の番号になります。
        ただし、0の場合、シリアル番号の未設定を意味します。
        この番号は、各ベンダーが管理します。

バイナリインターフェイスとテキストインターフェイス

    TURIPは、インターフェイスによってバイナリインターフェイスとテキストインターフェイスが
    あります。バイナリインターフェスはSPI、I2Cです。
    テキストインターフェイスはUART、HTTPです。
    バイナリインターフェイスでは、それぞれのデータ形式はリトルエンディアンで送受信されます。
    "bool"の場合、trueならば"0x01"、falseならば"0x00"となります。
    "string"の場合、終端にnull文字(0x00)を付加します。
    また、"bin"の場合には以下のようなフォーマットになります。
    [データサイズ(32bit), データ本体]
    テキストインターフェイスは、それぞれのデータ形式をテキスト形式に変換し、
    送受信を行います。
    整数型や浮動小数点型の場合は、10進数表記にする場合はそのまま(""無しで)記述します。
    16進数表記にする場合はテキスト形式(""あり)にします。
    "bool"の場合は"false"か"true"に、
    "bin"の場合は、base64エンコードでテキスト形式にします。

Manifest

    マニフェスト(Manifest)はモデル番号ごとに発行されるもので、ユーザーポートの情報、
    デバイスの性能が記述されます。マニフェストを参照することで、
    ユーザー（クライアントマシンを含む）はそのデバイスの機能、性能、利用方法を
    知ることができます。マニフェストはJSONフォーマットによって記述されます。
    以下にマニフェストの要素を定義します。

    "protocol"
        プロトコル情報
        "TURIP/(バージョン)"を格納
    "model"
        モデル番号の16進表記
    "name"
        デバイスの名前
    "description"
        デバイスの説明文
    "port"
        ユーザーポートの定義
    "interface"
        対応しているインターフェイスの列挙(文字列配列)
    "hub"(option)
        ハブ機能のサポート有無(default:"false")
    "interface-spi"(option)
        TURIPonSPIの構成情報
    "interface-i2c"(option)
        TURIPonI2Cの構成情報
    "interface-uart"(option)
        TURIPonUARTの構成情報
    "interface-http"(option)
        TURIPonHTTPの構成情報
    "profile"(option)
        プロファイルの宣言

    "port"内には以下の要素が存在します。

    ポート番号
        ポート番号("1"-"63")をstringで表現

    ポート番号内には、以下の要素が存在します。

    "name"
        ポートの名前
    "description"
        ポートの説明文
    "type"
        ポートのデータ形式
    "permission"
        ポートの読み書き可否
            "rw": 読み書き可能
            "r": 読み取りのみ可能
    "belong"(option)
        プロファイル要素への参加

    "interface-spi"内には以下の要素が存在します。

    "clock"
        クロック周波数(単位:100kHz)
        2(200kHz)-640(64MHz)(default:2)
    "interval"
        1byte毎のデータ送信間隔(単位:μsec)
        0-100(default:100)

TURIPonSPI

    TURIPonSPIでは、モード0のSPI通信を用います。ロジックレベルは3.3Vです。
    物理コネクターはJSTの6ピンPHコネクターです。コネクターのピンアサインを以下に示します。

                    1       2       3       4       5       6
                +-------+-------+-------+-------+-------+-------+
        JST-PH6 | MISO  | 3.3V  |  SCK  | MOSI  |  SS   |  GND  |
                +-------+-------+-------+-------+-------+-------+

    通信時の1バイトは8bitのMSBfirstで、パリティービットはありません。
    また、マルチバイトデータは、リトルエンディアンで扱います。TURIPonSPIは最初、
    セーフモードで稼働します。セーフモードの仕様は以下の通りです。

    クロック周波数
        200kHz
    1バイト毎の送信間隔
        100μsec

    送信間隔が100μsecもあるのは、DMAやバッファの持たないマイクロコントローラに対応する
    ためです。セーフモード以上のスピードで通信できるデバイスの場合、マニフェストで定義され
    ます。送受信のやりとりは以下のように行われます。

    1. SSをLowにして、SPIインターフェイスをイネーブルします。
    2. アクセスするポート番号を送信します。このとき、データを書き込む場合は最上位ビットを
       1にします。読み込む場合は0にします。
    3. 書き込みの場合、引き続きデータを送信します。
    4. デバイスからステータスの返信があります。
    5. 読み込みの場合、引き続きデータが送られてきます。
    6. SSをHighにして、SPIインターフェイスをディセーブルします。

    途中でSSをHighにすると、通信はリセットされます。ステータスの構造は以下の通りです。

    0bit(LSB)-3bit
        ステータスコード(4bit)
        0x0: ACK
        0x1: NACK
    4bit-7bit(MSB)
        予約('0'にしておくこと)

TURIPonI2C

    TURIPonI2CのコネクタはJSTの4ピンPHコネクタとします。ピンアサインは以下の通りです。

                    1       2       3       4
                +-------+-------+-------+-------+
        JST-PH4 |  SDA  | 3.3V  |  SCL  |  GND  |
                +-------+-------+-------+-------+

    ロジックレベルは3.3Vです。4.7kOhm抵抗でプルアップされます。同一I2Cバス内に同じI2C
    アドレスを持ったデバイスが存在してはなりません。TURIPは、アドレスの配布を行う機能を
    有しません。

TURIPonUART

    TURIPonUARTのコネクタはJSTの5ピンPHコネクタとします。ピンアサインは以下の通りです。

                    1       2       3       4       5
                +-------+-------+-------+-------+-------+
        JST-PH5 |  TX   |  RX   | 3.3V  |(N.C.) |  GND  |
                +-------+-------+-------+-------+-------+

    4番ピンは未接続ですが、TURIP以外の目的(プログラム書き込み時のリセット等)に用いること
    ができます。ロジックレベルは3.3Vです。ボーレートは115200bpsで、8bit、
    パリティー無しです。TURIPonUARTは、JSONオブジェクトによって構造化されたテキスト
    データで通信を行います。文字列オブジェクト内以外の空白文字や改行コードは無視されます。
    クライアント側から送られるデータ構造は以下の通りとなります。

    "id"
        デバイスのIDを示します。1対1通信時は省略できます。
    "mask"
        バスに複数のデバイスが接続されている場合、マルチキャストを行うためのマスクです。
        IDと同じく64ビット長で、IDとAND演算したものが一致したデバイスが対象になります。
    "port"
        ポート番号
    "method"
        "get": データの受信を行います
        "post": データの送信を行います
    "data" ("method":"post"時のみ)
        データをテキスト形式で送ります

    サーバー側から返答されるデータ構造は以下の通りとなります。

    "id"
        デバイスのID
    "status"
        リクエストに対するステータスコード。HTTP1.1をベースとします。
        "100": リクエストは成功した
        "404": そのようなリソースは存在しない
        "500": サーバに問題がある
    "port"("data"がある場合)
        データのポート番号
    "data"
        テキスト形式のデータ
        形式はクライアント側と同様です。

TURIPonHTTP

    TURIPサーバがWebAPIサーバとして機能します。下層レイヤについてはTURIPでは定義しま
    せん。基本的にはTURIPonUARTと同等ですが、クライアント側のJSONオブジェクトから
    "method"が無くなり、HTTPメソッドに置き換えられます。また、1対1通信のみとなります。
    また、"id"、"mask"も無くなります。
    複数デバイスの管理は、ipプロトコル等で行ってください。

ハブ機能

    この機能はOptionalです。TURIPサーバは、それ自身もクライアントとなっている場合、
    さらにその下層にあるサーバへのハブとして機能することができます。
    この機能は、TURIPの制御ポートを用いて実現されます。
    最大サーバ数は255個です。使用するポートは80(0x50)、81(0x51)、82(0x52)です。
    この機能の利用はテキストモードを推奨します。
    ポート80はハブが取り扱える最大サイズ（バイト）を返します(uint16)。
    ポート81は利用可能なサーバIDの配列を返します(string(json))。
    ポート82は接続先ID、ポート番号、データ形式の設定を受け付け、
    データのやりとりを行います(string(json))。

CRC付加機能

    この機能はOptionalです。ヘッダおよび通信末尾にCRCを付加し、エラー検出機能を実装
    します。この機能は未策定です。この機能のために、ポート0x54-0x57は予約されます。
